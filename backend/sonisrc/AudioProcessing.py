import numpy as np
import matplotlib.pyplot as plt
import scipy.io.wavfile as wavfile
import IPython.display as ipd
import scipy.io.wavfile as wavfile

def plot_fourier_mag(x,fs):
    """
    Given audio samples and the sample rate, plot
    the magnitude of the Fourier transform of x with 
    the appropriate frequency labels
    Parameters
    ----------
    x: ndarray(N)
        The audio samples
    fs: int
        The sample rate in hz
    """
    xft = np.abs(np.fft.fft(x))
    freqs = np.fft.fftfreq(len(x), 1/fs)
    plt.plot(freqs, np.abs(xft))
    plt.xlabel("Frequency")
    plt.ylabel("Magnitude")

"""
//////////////////////////////////////////////////////////////
Comb Filters
//////////////////////////////////////////////////////////////
"""

def get_comb_sound(fs, note, duration, n_pulses, n_samples, fmag_range):

    freq = 440 * (2 **(note/12)) #frequency
    t = int(fs/freq) #period
    y = np.random.randn(fs*duration)
    h = np.zeros(t*n_pulses)
    h[0::t] = 1  ## Impulse response
    x = np.convolve(y, h)

    res_string = "Combsound" + str(fs) + str(note) + str(duration) + str(n_pulses) + str(n_samples) + str(fmag_range)

    plt.subplot(2, 1, 1)
    plt.plot(x[0:n_samples])
    plt.subplot(2, 1, 2)
    plot_fourier_mag(x, fs)
    plt.xlim([0, fmag_range])
    plt.savefig("sonisrc/imgfigres/" + res_string + ".png")
    wavfile.write("sonisrc/audiores/" + res_string+".wav", fs, x)
    
    return res_string


# """
# //////////////////////////////////////////////////////////////
# Square Waves
# //////////////////////////////////////////////////////////////
# """
# note = 0
# freq = 440*(2**(note/12))
# fs = 44100
# duration = 1
# t = np.linspace(0, duration, duration * fs)

# y = np.sin(2*np.pi*freq*t)
# plt.plot(t, y)
# plt.xlim([0, 0.01])
# plt.xlabel("Seconds")

# z = np.sign(y)
# plt.plot(t,z)
# plt.xlim([0,0.01])
# plt.xlabel("Seconds")
# ipd.Audio(z, rate=fs)

# """
# //////////////////////////////////////////////////////////////
# Music Statement
# //////////////////////////////////////////////////////////////
# """

# def load_audio_mono(filename):
#     """
#     Load audio from a .wav file, mixing stereo 
#     to mono if necessary
#     Parameters
#     ----------
#     filename: string
#         Path to file
    
#     Returns
#     -------
#     fs: int
#         Sample rate
#     x: ndarray(N)
#         Mono audio
#     """
#     fs, x = wavfile.read(filename)
#     if len(x.shape) > 1:
#         x = np.mean(x, 1)
#     return fs, x

# ## TODO: Change this to your own example
# #I used my bands newest song
# fs, x = load_audio_mono("bb7w.wav")
# fs, h = load_audio_mono("imp_JFKTunnel.wav")
# # This is a faster version of convolve that uses fancy math
# y = fftconvolve(x, h) 

# y /= np.max(np.abs(y))
# wavfile.write("jessiesgirl_JFKTunnel.wav", fs, y)

# ipd.Audio(y, rate=fs)

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# """
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# """

# def make_sine(freq,length):
#     t = np.linspace(0, length, length*44100, False)
#     y = np.sin(np.pi*freq*t);
#     wavfile.write("test.wav", 44100, y)
#     return "test.wav"
    
